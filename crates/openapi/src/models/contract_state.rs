/*
 * Alephium API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.15.2
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ContractState {
    #[serde(rename = "address")]
    pub address: String,
    #[serde(rename = "bytecode")]
    pub bytecode: String,
    #[serde(rename = "codeHash")]
    pub code_hash: String,
    #[serde(rename = "initialStateHash", skip_serializing_if = "Option::is_none")]
    pub initial_state_hash: Option<String>,
    #[serde(rename = "immFields")]
    pub imm_fields: Vec<models::Val>,
    #[serde(rename = "mutFields")]
    pub mut_fields: Vec<models::Val>,
    #[serde(rename = "asset")]
    pub asset: Box<models::AssetState>,
}

impl ContractState {
    pub fn new(address: String, bytecode: String, code_hash: String, imm_fields: Vec<models::Val>, mut_fields: Vec<models::Val>, asset: models::AssetState) -> ContractState {
        ContractState {
            address,
            bytecode,
            code_hash,
            initial_state_hash: None,
            imm_fields,
            mut_fields,
            asset: Box::new(asset),
        }
    }
}

