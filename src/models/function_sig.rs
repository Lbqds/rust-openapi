/*
 * Alephium API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.15.2
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct FunctionSig {
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "usePreapprovedAssets")]
    pub use_preapproved_assets: bool,
    #[serde(rename = "useAssetsInContract")]
    pub use_assets_in_contract: bool,
    #[serde(rename = "isPublic")]
    pub is_public: bool,
    #[serde(rename = "paramNames")]
    pub param_names: Vec<String>,
    #[serde(rename = "paramTypes")]
    pub param_types: Vec<String>,
    #[serde(rename = "paramIsMutable")]
    pub param_is_mutable: Vec<bool>,
    #[serde(rename = "returnTypes")]
    pub return_types: Vec<String>,
}

impl FunctionSig {
    pub fn new(name: String, use_preapproved_assets: bool, use_assets_in_contract: bool, is_public: bool, param_names: Vec<String>, param_types: Vec<String>, param_is_mutable: Vec<bool>, return_types: Vec<String>) -> FunctionSig {
        FunctionSig {
            name,
            use_preapproved_assets,
            use_assets_in_contract,
            is_public,
            param_names,
            param_types,
            param_is_mutable,
            return_types,
        }
    }
}

