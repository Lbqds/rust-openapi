/*
 * Alephium API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.15.2
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct BuildGrouplessDeployContractTxResult {
    #[serde(rename = "fromGroup")]
    pub from_group: i32,
    #[serde(rename = "toGroup")]
    pub to_group: i32,
    #[serde(rename = "unsignedTx")]
    pub unsigned_tx: String,
    #[serde(rename = "gasAmount")]
    pub gas_amount: i32,
    #[serde(rename = "gasPrice")]
    pub gas_price: String,
    #[serde(rename = "txId")]
    pub tx_id: String,
    #[serde(rename = "contractAddress")]
    pub contract_address: String,
    #[serde(rename = "fundingTxs", skip_serializing_if = "Option::is_none")]
    pub funding_txs: Option<Vec<models::BuildSimpleTransferTxResult>>,
}

impl BuildGrouplessDeployContractTxResult {
    pub fn new(from_group: i32, to_group: i32, unsigned_tx: String, gas_amount: i32, gas_price: String, tx_id: String, contract_address: String) -> BuildGrouplessDeployContractTxResult {
        BuildGrouplessDeployContractTxResult {
            from_group,
            to_group,
            unsigned_tx,
            gas_amount,
            gas_price,
            tx_id,
            contract_address,
            funding_txs: None,
        }
    }
}

