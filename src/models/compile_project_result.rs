/*
 * Alephium API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.15.2
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CompileProjectResult {
    #[serde(rename = "contracts")]
    pub contracts: Vec<models::CompileContractResult>,
    #[serde(rename = "scripts")]
    pub scripts: Vec<models::CompileScriptResult>,
    #[serde(rename = "structs", skip_serializing_if = "Option::is_none")]
    pub structs: Option<Vec<models::StructSig>>,
    #[serde(rename = "constants", skip_serializing_if = "Option::is_none")]
    pub constants: Option<Vec<models::Constant>>,
    #[serde(rename = "enums", skip_serializing_if = "Option::is_none")]
    pub enums: Option<Vec<models::Enum>>,
    #[serde(rename = "warnings", skip_serializing_if = "Option::is_none")]
    pub warnings: Option<Vec<String>>,
}

impl CompileProjectResult {
    pub fn new(contracts: Vec<models::CompileContractResult>, scripts: Vec<models::CompileScriptResult>) -> CompileProjectResult {
        CompileProjectResult {
            contracts,
            scripts,
            structs: None,
            constants: None,
            enums: None,
            warnings: None,
        }
    }
}

