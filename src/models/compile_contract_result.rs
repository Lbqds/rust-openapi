/*
 * Alephium API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.15.2
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CompileContractResult {
    #[serde(rename = "version")]
    pub version: String,
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "bytecode")]
    pub bytecode: String,
    #[serde(rename = "bytecodeDebugPatch")]
    pub bytecode_debug_patch: String,
    #[serde(rename = "codeHash")]
    pub code_hash: String,
    #[serde(rename = "codeHashDebug")]
    pub code_hash_debug: String,
    #[serde(rename = "fields")]
    pub fields: Box<models::FieldsSig>,
    #[serde(rename = "functions")]
    pub functions: Vec<models::FunctionSig>,
    #[serde(rename = "constants")]
    pub constants: Vec<models::Constant>,
    #[serde(rename = "enums")]
    pub enums: Vec<models::Enum>,
    #[serde(rename = "events")]
    pub events: Vec<models::EventSig>,
    #[serde(rename = "warnings")]
    pub warnings: Vec<String>,
    #[serde(rename = "maps", skip_serializing_if = "Option::is_none")]
    pub maps: Option<Box<models::MapsSig>>,
    #[serde(rename = "stdInterfaceId", skip_serializing_if = "Option::is_none")]
    pub std_interface_id: Option<String>,
}

impl CompileContractResult {
    pub fn new(version: String, name: String, bytecode: String, bytecode_debug_patch: String, code_hash: String, code_hash_debug: String, fields: models::FieldsSig, functions: Vec<models::FunctionSig>, constants: Vec<models::Constant>, enums: Vec<models::Enum>, events: Vec<models::EventSig>, warnings: Vec<String>) -> CompileContractResult {
        CompileContractResult {
            version,
            name,
            bytecode,
            bytecode_debug_patch,
            code_hash,
            code_hash_debug,
            fields: Box::new(fields),
            functions,
            constants,
            enums,
            events,
            warnings,
            maps: None,
            std_interface_id: None,
        }
    }
}

