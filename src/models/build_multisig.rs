/*
 * Alephium API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.15.2
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct BuildMultisig {
    #[serde(rename = "fromAddress")]
    pub from_address: String,
    #[serde(rename = "fromPublicKeys")]
    pub from_public_keys: Vec<String>,
    #[serde(rename = "fromPublicKeyTypes", skip_serializing_if = "Option::is_none")]
    pub from_public_key_types: Option<Vec<String>>,
    #[serde(rename = "fromPublicKeyIndexes", skip_serializing_if = "Option::is_none")]
    pub from_public_key_indexes: Option<Vec<i32>>,
    #[serde(rename = "destinations")]
    pub destinations: Vec<models::Destination>,
    #[serde(rename = "gas", skip_serializing_if = "Option::is_none")]
    pub gas: Option<i32>,
    #[serde(rename = "gasPrice", skip_serializing_if = "Option::is_none")]
    pub gas_price: Option<String>,
    #[serde(rename = "group", skip_serializing_if = "Option::is_none")]
    pub group: Option<i32>,
    #[serde(rename = "multiSigType", skip_serializing_if = "Option::is_none")]
    pub multi_sig_type: Option<MultiSigType>,
}

impl BuildMultisig {
    pub fn new(from_address: String, from_public_keys: Vec<String>, destinations: Vec<models::Destination>) -> BuildMultisig {
        BuildMultisig {
            from_address,
            from_public_keys,
            from_public_key_types: None,
            from_public_key_indexes: None,
            destinations,
            gas: None,
            gas_price: None,
            group: None,
            multi_sig_type: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum MultiSigType {
    #[serde(rename = "P2HMPK")]
    P2Hmpk,
    #[serde(rename = "P2MPKH")]
    P2Mpkh,
}

impl Default for MultiSigType {
    fn default() -> MultiSigType {
        Self::P2Hmpk
    }
}

