/*
 * Alephium API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.15.2
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct BuildMultisigAddress {
    #[serde(rename = "keys")]
    pub keys: Vec<String>,
    #[serde(rename = "keyTypes", skip_serializing_if = "Option::is_none")]
    pub key_types: Option<Vec<String>>,
    #[serde(rename = "mrequired")]
    pub mrequired: i32,
    #[serde(rename = "multiSigType", skip_serializing_if = "Option::is_none")]
    pub multi_sig_type: Option<MultiSigType>,
}

impl BuildMultisigAddress {
    pub fn new(keys: Vec<String>, mrequired: i32) -> BuildMultisigAddress {
        BuildMultisigAddress {
            keys,
            key_types: None,
            mrequired,
            multi_sig_type: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum MultiSigType {
    #[serde(rename = "P2HMPK")]
    P2Hmpk,
    #[serde(rename = "P2MPKH")]
    P2Mpkh,
}

impl Default for MultiSigType {
    fn default() -> MultiSigType {
        Self::P2Hmpk
    }
}

